	1.在android设备上 Qt quick默认使用openGL ES
	2.QML的很多基本类型都是基于QtC++对象创建的
	3.C++中使用QML对象

▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
					第1章	概念
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
Application
	QCoreApplication (Qt核心支持)
	QGuiApplication  (Quick引擎)
	QApplication (QWidgets引擎)
	QQmlApplicationEngine
		.window
		.load		// 加载Qml文档

QML根对象
	Window
	ApplicationWindow
	Item




▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
					第11章	C++与QML混合编程
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
【一】在QML中使用C++对象
	①使用方式
		方式一： 
			C++中实现一个类, 注册为QML环境的一个类型, 在QML环境中使用该类型创建对象
		方式二：
			在C++中构造一个对象, 将这个对象设置为QML的上下文, 在QML环境中直接使用该属性
		注意： 不管使用哪种方式， 对导出的C++类都有要求，不是一个类的所有方法、变量都可以在QML语言环境中使用
	------------------------------------------------------------------------------------------------------------------
	②定义可以导出的C++类	
		[1]前提条件
			1.c++类必须从QObject或QObject的派生类中继承
			2.必须使用Q_OBJECT宏
		[2]能够在QML中访问的C++属性和方法
			1.信号函数和槽函数
				1.可以把C++对象的信号连接到QML中定义的方法上
				2.也可以把QML对象的信号连接到C++对象的槽上
				3.可以在QML中直接调用C++对象的槽或信号
			2.在定义一个类的成员函数是使用Q_INVOKABLE宏来修饰	// Q_INVOKABLE
				1.这样就可以让该方法被元对象系统调用
				2.注意: 这个宏必须放在返回类型前面
				3.一旦你使用Q_INVOKABLE宏将某个方法注册到元对象系统中,早QML中就可以用"对象.方法(arg..)来访问该方法"
			3.在QML中使用C++中定义的枚举类型
				1.使用Q_ENUMS宏声明C++中定义的枚举类型
					class Cls : public QObject {
						Q_OBJECT
						Q_ENUMS(E)
					public:
						enum E{a,b};
					}
				2.一旦你使用Q_ENUMS宏注册了枚举类型,在QML中就可以使用"类名.枚举值"来访问	
			4.Q_PROPERTY
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【二】在C++中使用QML对象
	[1]可以访问到QML中的内容	// 通过元对象系统
		1.可以使用QML对象中的信号和槽
		2.可以访问QML对象中的属性
	[2]在C++中查找QML中的对象
		1.函数
			findChild()
			findChildren()
		2.示例
			// 查找parentWidget的名为button1, 类型为QPushButton的孩子
			QPushButton *button = parentWidget->findChild<QPushButton *>("button1")
			// 返回parentWidget的所有名为"widgetname"的QWidget类型的孩子列表
			QList<QWidget *> widgets = parentWidget->findChildren<QWidget *>("widgetname")
	[3]使用元对象调用QML对象的方法
		QMetaObject的invokeMethod()方法调用一个对象的信号,槽,及可调用方法。他是一个静态函数
