概念
	数据库
	mysql(小, 免费, 开源)
	表格
	数据库管理系统 DBMS
	表: 具有固定的行数和列数
	数据库: 一些关联表的集合
	列:		字段
	行:		记录
	主键:	主键是唯一的。一个数据表只能包含一个主键（比如身份证号）
	外键： 用于关联两个表
	索引： 使用索引可以快速的访问数据库表中的特定信息。
		索引是对数据库表中一列或者多列的值镜像排序的一种结构。类似于书的目录。
windows安装：
	1.只需要安装MySQL servers， 其他的都不需要安装
	
安装
	sudo apt-get install mysql-server
	mysql -uroot -p		// 进入数据库命令行
	quit;	// 退出命令行
	show global variables like 'port';	// 查看数据库使用的端口号
	show variables like "%char%";		// 查看数据库安装的路径及数据库基本信息	

常用数据库命令
	show databases;
	use 数据库名;
	create 数据库名;
	drop 数据库名;
	show tables;

▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
				第0章		数navicat图形化工具
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
1.在cmd命令行中敲代码效率很低。
2.图形化界面工具：navicat.exe
	1.报错:2059-authentication, 
	  解决: use mysql;
	  ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
3.创建新数据库
	右键连接名->新建数据库
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
				第1章		MySQL存储引擎
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
数据库对象
	1.存储,管理和使用数据的不同结构形式,如: 表、视图、存储过程、函数、触发器、事件等。
	2.一个数据库可以以： 表、视图、函数、事件、查询、报表等方式呈现出来
数据库
	1.存储数据库对象的容器
存储引擎
	1.MySQL中的数据用各种不同的技术存储在文件（或者内存）中。
	2.每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。
	3.通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。
	4.不同的存储引擎性能是不一样的。
	5.一些存储引擎支持某些事务，也可能不支持某些事务。
事务
	1.是指作为单个逻辑工作单元执行的一系列操作，要么完全的执行，要吗完全的不执行（原子操作）
	
存储引擎分类
	MYISAM
		1.不支持事务，也不支持外键，访问速度快
		2.对事物没有完整性要求或者以select、insert为主的应用基本都可以。
		3.每个MYISAM在磁盘上存储3个文件，其中文件名和表名都想吐，但是扩展名不同
			.frm(存储表定义)
			MYD(MYData,存储数据)
			MYI(MYIndex,存储索引)
	INNODB
		1.InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全
		2.对比于MYISAM，将消耗更多的磁盘空间以保留数据和索引。
	MEMORY
		1.memmory使用存在内存中的内容来创建表.每个MEMORY表实际上对应一个磁盘文件,格式是.frm
		2.MEMORY类型的表访问非常快,因为他的数据是放在内存中中的,并且默认使用HASH索引,但是一旦服务器关闭,表中的数据便会丢失.

▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
				第1章		MySQL介绍
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
什么是SQL
	SQL是structured Quevy Language(结构化查询语言)的缩写。
	SQL是专为数据库而建立的操作命令集,是一种功能齐全的数据库语言。
	使用时只需要发出“做什么”的命令，“怎么做”是不用使用者考虑的。
SQL功能分类
	DDL： 数据定义语言(Data Define)			// 用来定义数据库对象: 创建库, 表, 列等。
	DML:  数据操作语言(Data Manipulation)	// 用来操作数据库表中的记录
	DQL:  数据查询语言(Data Quevy)			// 用来查询数据
	DCL:  数据控制语言(Data contrl)			// 用来定义访问权限和安全级别	

▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
				第1章		SQL数据类型
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
①概述
	1.MYSQL中定义数据字段的类型对数据库的优化是非常重要的。
	2.MuSQL支持所有标准SQL数值数据类型
	3.MySQL支持多种类型，大致可以分为三类：
		数值类型
		字符串类型
		日期和时间类型
	4.常用数据类型
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
②数值类型
	类型		  字节数	
	------------------------------------	
	TINYINT		  	1	
	SMALLINT	  	2
	MEDIUMINT	  	3	
	INT/INTEGER	  	4	
	BIGINT			8
	FLOAT			4
	DOUBLE			8
	........................
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
③字符串类型
	类型		 大小		 	 描述	
	------------------------------------	
	CHAR		(0-255)			定长字符串: 字符串未达到255字节时系统也分配255字节; 字符串超过255字节时,系统不再分配空间,字符串被裁减。
	VARCHAR		(0-255+)		变长字符串: 字符串未达到255字节时,系统分配实际占用字节数; 字符串超过255字节时,系统继续分配空间来存储。
	TINYBLOB		
	YNIYTEXT		
	BLOB		
	TEXT						 长文本数据（比如存一个文章）	
	MEDIUMBLOB	
	MEDIUMTEXT	
	LOGNGBLOB	
	LOGTEXT						 极大文本数据		
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
④日期和时间类型	
	类型		字节数		格式		描述
	------------------------------------------------------------------------		
	DATE		3		  YYYY-MM-DD	年-月-日								
	TIME		3		  HH::MM::SS	时:分:秒						
	YEAR		1		  YYYY			年									
	DATETIME	8		  YYYY-MM-DD    年-月-日 \n
						  HH::MM::SS	时:分:秒
	TIMESTAMP	8		 YYYYMMDDHHMMSS 混合:年月日,时分秒,时间戳						
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
⑤常用数据类型
	double: 	浮点型,例如double(5,2)表示最多表示5位,其中必须有2位小数,及最大值位999.99
	char:   	固定长度的字符串类型,例如:char(10)'abc       ' // 10个字符; 未占用的字符用空格补齐
	varchar: 	可变长字符串类型; 例如:varchar(10)'abc'		  // 最多占用10个字符; 比如只占用3个字节,系统指挥分配3个字节的空间
	text:		字符串类型 	// 存储大量文本, 比如一本书.
	blob: 		二进制类型	// 计算机直接能够执行的类型
	date:		日期类型, 格式为: yyyy-MM-dd;
	time:		事件类型,格式为: hh:mm:ss
	datetime: 	日期时间类型 yyyy-MM-dd hh:mm:ss
	int : 		默认为int(11), 数据不够11位时,前面用0补齐。注意跟varchar进行区分。
				比如：int age = 55； 在数据库中存储为 00000000055 
	注意: 在MYSQL正品美国，字符串类型和日期类型都要用单引号括起来。'Myxq' '2012-11-02'

▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
				第1章	DDL数据定义语言(Data Define)
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
// 操作表的结构
	1.创建数据库			
		create database db1 character set utf8; //db1:数据库名, utf8字符集名
		use db1;
	2.修改数据库			
		use 数据库名;
	3.创建学生表			
		create table 表名(
		列名1 列的类型 [约束],
		列名2 列的类型 [约束],
		...
		);
		注意: 最后一行没有逗号
		例:  create table stu (id int, name varchar(25), age int, email varchar(255));
			 show tables;
	4.添加一列
		alter table 表名 addd 列名 数据类型;
	5.查看表的字段信息
		desc 表名
	6.修改一个表的字段类型
		alter table 表名 modify 字段名 新类型;
		例如: alter table stu modify id bigint;
	7.删除一列
		alter table 表名 drop 字段名;
		例如: alter table stu drop new; 
	8.修改表名
		rename table 原始表名 to 要修改的表名
	9.查看存在的表的创建细节	
		show create table 表名;
	10.修改表的字符集
		alter table 表名 charracter set 字符集名称
		例如: alter table stus charracter set gbk
			  show create table 表名;
	11.修改表的列名
		alter table 表名 change 原始列名 新列名 数据类型;
		例如: 
	12.删除表
		drop table 表名;
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
				第1章	DML数据操作语言(Data Manipulation)
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
// 操作表中的数据
	1.查询表中的所有数据
		select * from 表名;		// 以表形式展示
		select * from 表名 \G;	// 以键值对形式展示
	2.插入记录操作
		[1]单记录插入: 
			insert into 表名(列名1,列名2...) values(列值1,列值2...);
		[2]注意事项
			1.列名与列值的类型、顺序、个数、顺序要一一对应。
			2.值不能超出列定义的类型长度
			3.插入的日期与插入字符一样，都需要使用单引号括起来。
		[3]批量插入
			insert into 表名(列名1,列名2...) values(列值1,列值2...),(列值1,列值2...)...;
			示例: // 一次性添加多条记录
				-> insert into stus(id,name,age,email, score, addr) values
				-> (22,'王五',23,'qq.com',100,'广州'),
				-> (33,'李留',24,'bb.com',100,'非洲');
		
	4.更新(修改)数据操作
		update 表名 set 列名1 = 列值1, 列名2=列值二... where=值
		示例
			1.把所有学生的分数改为90
				update stus set score=90;
			2.把张三的分数改为60
				update stus set score=60 where name='张三';
			3.把李四的年龄改为20和分数改为70
				update stus set age=20, score=70 where name='李四';
			4.把王五的年龄在原来的基础上+1岁
				update stus set age=age+1, score=70 where name='王五';
			5.修改数据库密码
				use mysql;
				desc user;
				update user set authentication_string=password('123456') where user='root2' and Host='localhost';	//password是一个函数,表示对参数加密
	5.删除数据操作
		1.删除满足条件的记录
			delete from 表名[where 列名=值]
		2.删除所有记录
			1.delete from 表名;
			2.truncate table 表名； // 删除所有放入数据
		3.delete与truncate的区别
			1.delete删除表中的数据,但是表结构还在, 所以删除的数据可以找回
			2.truncate是直接将表drop, 然后在创建一个同结构的新表。所以删除的数据不可找回。
			3.truncate的执行速度比delete块
			
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
				第1章	DQL 数据查询语言(Data Quevy)
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
1.查询所有列
	select * from 表名
2.结果集
	1.数据库执行DQL语句不会对数据进行改变, 而是让数据库发送结果集个客户端。
	2.结果集：通过查询语句查询出来的数据以表的形式展示给我们称这个表为虚拟结果集。
	3.查询的结果返回的是一张虚拟表。
3.查询指定列的数据
	select 字段名1，字段名2... from 表名;

4.条件查询
	[1]条件查询就是在查询是给出where子句, 在where子句中可以使用一些运算符及关键字:
	[2]条件查询运算及关键字 
		= 、!=、 <>（不等于）、< 、<=、 >=
		between...and; 			//（值在什么范围）
		in(set);				// 固定范围值
		is NULL; is not NULL	// 为空、不为空。
		and
		OR
		NOT
	[3]使用
		查询性别为男， 并且年龄为20的学生记录。
			select * from stus where gender='男' AND age=20;
		查询学号为1001 或者 名为zs的记录
			select * from stus where id=1001 OR name = 'zs';
		查询学号为1001，1002， 1003的记录
			select * from stus where id =  1001;
		查询年龄为null的记录
			select * from stus where age = NULL;
		查询年龄在18-20之间的学生记录
			
		查询性别非男的学生记录
		
		查询姓名部位null的学生记录
5.模糊查询
6.字段控制查询
7.排序

	
	
	
	
	
	
	
	
	
	DCL:  数据控制语言(Data contrl)			// 用来定义访问权限和安全级别	
	