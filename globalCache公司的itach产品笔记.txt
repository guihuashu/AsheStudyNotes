//这个产品目前应用的功能是红外模块(IR)
// 想要发送红外码好像只能通过HTTP
// linux c用http使用(cURL)(libcurl)

################################################################################################	
1.我虚拟好IR设备之后采用"上报状态"上报我IR设备
2.高级网关控制我是使用"写操作", 我要解析然后发送红外码(不用给高级网关回复ack)
3.我发送红外码后的状态用"上报状态"上报IR设备状态
4.设备掉线后"主动上报"
	{
		"cmd": " online_ack",
		"uid":268503813,
		"status": "offline"
	}
5.不用上报设备在线
6.控制失败, 不用上报给高级网关
		
7.json进制需要转换?
8.设备状态信息实时写到文件里面去, 如果IR驱动被重启就从文件中读取设备的状态值

################################################################################################	
高级网关信息:
	用户: root
	账户: 192.168.2.250
	采用: SFTP传送文件

################################################################################################	
高级网关驱动(IR模块)开发流程:
	1.从 /mnt/unix/config/device/ 目录下读取IR设备信息的json串
	2.虚拟出IR设备
	3.IR模块驱动初始化
		1.接受IR模块的udp beacon信标, 解析出IR模块的IP地址
		2.TCP连接到IR模块
		3.通过TCP命令设置IR模块的模块连接信息
	4.连接到网关(高级网关协议上的"连接")
	5.绑定域套接字recv_un("/mnt/unix/path/infrared"), 并从该处接受设备文件信息的json串	// 创建管道文件: 用于读取IR设备的控制信息
	6.从recv_un处接受设备控制json串
	7.解析json串并将红外码通过命令发给IR模块
	8.读取IR模块被控制后的反馈信息, 并以此更新虚拟设备状态。
	9.更新后的虚拟设备状态发送到域套接字send_un("/mnt/unix/server")	// 高级网关创建的管道
	10.定时回复心跳包


################################################################################################	
set_IR中的port是指通道号
ProntoEdit的红外码格式:	
http://www.remotecentral.com/features/irdisp2.htm?tdsourcetag=s_pcqq_aiomsg
	1.ProntoEdit HEX格式使用一对数字来表示开/关序列。
	2.第一个数字表示ON时间，第二个数字表示OFF时间。
	3.突发对真正包含的是用于打开和关闭灯的载波的周期数。
	4.假设载波频率为40千赫兹（即每秒40,000个周期）。
		1.该载波的一个周期需要1/40000单位时间或25微秒。
		2.48,24的“突发对”将使IR发射器开启48 * 25微秒，并关闭24 * 25微秒。
		3.24,24的“突发对”将使IR发射器开启24 * 25微秒，并关闭24 * 25微秒。
	5.因为我们使用的是二进制数字，所以我们只有两个数字来表示(0,1)，而十进制则需要10个惟一的突发对模式来表示10个十进制数字。
		// 为什么二进制只需要2对, 用十进制需要10对?
		例如可以将ON周期数是OFF的2倍表示为1, 将N周期数=OFF周期数表示为0
			如: “1”选择48,24，为“0”选择24,24。
	6.完整的红外码包括3个部分
		[头]	[突发对序列1]	[突发对序列2]
		1.任何一个突发对序列都是可选的, 实际上我们有3中不同的IR码模式:
			[头]	[突发对序列1]	[ 突发对序列2]
			[头]	[突发对序列1]
			[头]	[突发对序列2]
	7.前导码
		1.前导码中不包含突发对, 而是
		2.前导码包含4个16进制数字。每个数由4位数组成
			1.第一个数始终为（0000），表示IR模式是原始数据。
		
	
		
################################################################################################		
TCP通信笔记
	http://www.globalcache.com/files/releases/flex-16/API-Flex_TCP_1.6.pdf			

(2)Network Configuration
	1.出厂模式下, iTach Flex WiFi在Adhoc模式下运行，它会广播自己的adhoc WiFi网络。
	2.一旦与iTach adhoc连接, 客户端设备就可通过固定的IP 192.168.1.70, 可以在网页上访问这个IP地址来配置iTache模块的wifi网络
	3.wifi网络配置完成后, iTache将重启并连接到配置的wifi网络
	4.默认情况下, itache通过DHCP从路由表处获取一个IP
	5.如果没有DHCP服务, 必须给itach配置一个静态IP
	6. iTach Flex模块采用DHCP ip地址模式, 只要有效的网线连接到itach模块, itach模块就会分配一个有效的静态ip
	7.ihelp可以检测到所有连接到连接到网络中的iTach Flex设备
	8.iTach Flex模块会每个10s广播一条beacon信标消息,包含ip地址,固件版本, MAC ID等信息
	9.iHelp的作用是监听beacon消息, 并且将设备列表显示出来。另外，iHelp还提供固件升级功能。
------------------------------------------------------------------------------------------		
(3)Network Discovery
	1.itache模块提供了2个办法来发现itache模块
		1.周期性的UDP beacon广播
		2.组播DNS机制
	2.beacon是发生一个包到组播地址239.255.250.250，目的MAC是01:00:5E:7F:FA:FA， 目的端口是9131
		1.beacon在网络连接后不久以10s的间隙周期发出
		2.任何加入多播组的网络设备都将收到这个beacon
		3.示例：
			AMXB
			<-UUID=GlobalCache_000C1E024239>	// 独一无二的mac地址
			<-SDKClass=Utility>
			<-Make=GlobalCache>
			<-Model=iTachFlexWiFi>				// 可能是iTachFlexEthernet|iTachFlexEthernetPOE|iTachFlexWiFi
			<-Revision=710-2000-15>
			<-Pkg_Level=>
			<-Config-URL=http://192.168.1.70>
			<-PCB_PN=025-0033-10> (1)
			<-Status=Ready>
------------------------------------------------------------------------------------------		
4.API CONNECTION
	1.所有的iTache Flex TCP API请求和回复通信都是通过TCP套接字连接到4998端口
	2.iTache模块最多支持8路TCP客户端同时连接。
	3.所有的TCP API请求都是以一行ASCII文本字符串的形式被发送，并以回车符结束。
	4.在Flex连接穿行电缆的唯一情况下。 串行数据是在TCP端口4999上发送和接收的， 在这种情况下，数据直接在网络TCP连接和Fl之间通信。
------------------------------------------------------------------------------------------		
【五】API Request	//  iTach Flex and Flex Link cables TCP API
①概述	
	[1]格式:
		<command>,<module>:<port>,<parameter1>,<parameter2>,…,<parameterN>↵
			1.括号中的每一个参数都用括号中的名称表示
			2.每一个参数都用逗号分隔
			3.不同的命令可能参数个数不同
			4.请求必须是一行， 并且以回车符结束（“↵”）
			5.<command>是一个固定的字符串
			6.<module>:<port>有时是一个固定的值
			7.<parameterX>始终表示用户指定的文本值，必须替换为特定命令指定的值。
				当参数有多个选项可用时，它们将显示为由垂直栏分隔符“|”字符分隔的选项。
			注意：命令和参数是大小写敏感的
			例如：get_NET命令用于查询itach模块的的网络设置
				get_NET,<module>:<port>↵
					where:
					<module>:<port> = 0:1 (网络模块的地址是0:1)
				因此,TCP API请求的文本应该为:
					get_NET,0:1↵		// 发送数据get_NET,0:1后面再代码中添加\r\n
			
	[2]Errors
		1.当Tcp命令无效时将回复一个码
		2.例
			Example invalid request:
			setstate,1:1,↵ (the <state> parameter is missing - see Section 5.4)
			Response:
			ERR [error code]↵
------------------------------------------------------------------------------------------		
5.1 GENERAL COMMANDS
	getdevices		// 获取连接的设备
	getversion		// 获取版本号
	get_NET,0:1		// 获取网络信息
------------------------------------------------------------------------------------------		
5.2.1 IR COMMANDS	
	set_IR,<module>:<port>,<mode>	// 设置连接模块的端口属性	
		1.mode用于选择模块的兼容模式(单线, 三线,传感器, 串口)
		2.set_IR,1:1,IRTRIPORT
	
	get_IR,<module:port>↵	// 获取连接模块的端口属性
		1.get_IR,1:1
------------------------------------------------------------------------------------------		
5.2.2 IR STRUCTURE	// 向IR模块发送红外波
	
------------------------------------------------------------------------------------------		
5.2.3 SENDING IR	// 向IR模块发送红外码来控制IR设备
	[1]概述
		1.红外设备的控制是通过使用sendir命令来实现的。
		2.在某些情况下，IR命令可能需要几百毫秒才能完成，因此iTach Flex提供了一个completeir确认，以指示何时准备接受下一个IR命令。
	[2]格式
		sendir,<module:port>,<ID>,<freq>,<repeat>,<offset>,<on1>,<off1>,<on2>,<off2>,…,<onN>,<offN>↵
		where:
			<module:port> = (1) address of the desired IR channel (see below)
			<ID> = 0|1|2|…|65535 (2) (for the completeir response, see below)
			<freq> = 15000|…|500000 (in hertz)
			<repeat> = 1|2|…|20 (3) (the IR command is sent <repeat> times)
			<offset> = 1|3|5|…|383 (4) (used if <repeat> is greater than 1, see below)
			<on1> = 4|5|…|50000 (5) (number of pulses)
			<off1> = 4|5|…|50000 (5) (absence of pulse periods of the carrier frequency)
			N = the count of <on>,<off> pairs, which must be less than 260 (total of 520 numbers)
	[3]说明
		<module:port>
			Flex Link 3发射器，Flex Link 2E1B和Flex Link三端口电缆使用单个3.5 mm Flex Link端口提供三（3）个IR输出的离散通道。 在这些情况下，发送到3个IR通道中的任何一个的发送请求必须使用该端口组件
			这种情况下<module：port>参数用于寻址3个IR通道中的每一个。 因此，对于iTach Flex，3个IR通道中的每一个都被称为
			如下（并非显示所有的sendir参数）：
				sendir,1:1,…
				sendir,1:2,…
				sendir,1:3,…
		<ID>
			是sendir请求提供的一个数字，该数字稍后包含在completeir响应中，以指示成功完成了请求的IR传输。
		<repeat>
			1.<repeat>是发送IR传输的次数，在没有通过stopir或后续的IR命令中止传输的情况下(参见第5.4节)。
			2.可以接受大于20的值，但是传输重复的最大数量限制为20。在所有情况下，序言只发送一次(参见下面<offset>)。
			3.当<repeat>大于1时，<offset>适用。对于具有前导码的IR命令，使用<offset>
		<offset>
			1.避免在重复的IR定时模式期间重复前导码。 <offset>值表示定时内的位置模式开始重复IR命令，
			2.从定时模式开始，<offset>始终是奇数值以<on>状态开始，必须以<off>状态结束
			
				<offset>			Repeat
				odd value		start locations
			
					1 				<on1> 					no preamble
					3 				<on2>
					….				 ….
					n-1				 <on((n/2)-1)>		
		
		<on1>,<off1>
			1.由于IR传输以<off>条件结束，因此必须有相同数量的<on>和<off>状态。 
			2.此外，每个<on>和<off>状态必须满足80μS的最短时间要求才能正确发送IR码。			
			3.当载波频率为60khz时，<on>和<off>状态的最小值计算如下:
				<off> min = <on> min ≥ 80μS * ƒ = 80μS * 60 KHz = 4.8
				注意: 为了在60khz正确复制IR代码，定时模式中的所有<on>和<off>值都必须大于或等于5。
			4.对于一个有效的sendir请求，必须满足上述所有条件。当变量丢失或超出接受范围时，将返回一个错误。例如，下面的示例sendir命令将导致错误响应。	
	[4]GLOBAL CACHÉ COMPRESSED IR FORMAT
		压缩的IR格式解释前15个唯一<on>，<off>对并分配一个大写字母（A，B，C等）到每个独特的对。
		第一次在IR命令中出现唯一对时，会为其分配一个ASCII字符。 
		任何然后，同一对的后续出现用相同的ASCII字符而不是<on>，<off>表示
		表示。 这允许sendir请求字符串明显更短，这在长的情况下是有利的IR代码。

------------------------------------------------------------------------------------------		
	

	
	
################################################################################################		
http通信笔记	
	http://www.globalcache.com/httpapi	
概述:
	1.用于控制和监控GlobalCaché设备	
	2.支持 iTach Flex和外围Flex Link电缆产品的API。
	3.API呈现的内容
		1.Resources:
			1.设备的逻辑功能和组件
			2.表示为URL地址的层次结构，与物理设备的组织一致。
		2.Attributes:
			1.表示每个资源的特定属性。
			2.表示为json格式的对象
		3.所有API资源都是超链接的，包含一个href属性，其值指示资源的绝对API路径(URL)。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	






	
		