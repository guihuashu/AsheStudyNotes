《漫画算法》
逻辑结构：数据对象中各元素的关系
	集合结构：数据元素中间没有关系，但从属于一个集合
	线性结构：数据元素之间呈一对一关系
	树型结构：元素之间呈一对多的关系
	图形结构：多对多的关系
	
物理结构：数据的逻辑结构在计算机中的存储形式
	顺序存储存储：将数据元素存放在地址连续的存储单元里，
		数据间的逻辑关系和物理关系是一致的，如数组。
	链式存储存储：
		数据元素存放在任意存储单元里，存储单元可以连续也可以不连续。
######################################################################################################
				一、 算法效率的度量方法
######################################################################################################
(1)对效率影响较大的因素：
	 1.算法采用的策略，方案
	 2.编译产生的代码质量
	 3.问题的输入规模
	 4.机器执行指令的速度
------------------------------------------------------------------------------------------------------	  
(2)常见算法的时间复杂度	: 
	[1]O(1): <常数阶>
		printf
		printf
		...
	[2]O(n): <线性阶>
		for (i=1; i<n; i++){}
	[3]O(n^2)：<平方阶>
		1.for (i=1; i<n; i++){
			for (j=1; j<n; j++)
		  }
		2.for (i=1; i<n; i++){
			for (j=i; j<n; j++)
		  } // 复杂度= n + n + n-1+...+1= (n+1)n/2 = O(n^2)
	[4]O(n^3): <立方阶>
		for
		 for
		  for
	[5]对数阶<O(logn)>
		i=1;n=100
		while (i<n){
			i *= 2;
		} // 2^x=n ==》x=log(2)n
	[6]O(nlogn)：nlogn阶
		for (i=1;i<n;i++){
			while(j<n){
				j*=2;
			}
		}
	[7]n!	
		func(i){
			if(--i != 0){
				func(i)
			}
		}
		int main(){
			func(n);			
		}
		
	[7]2^n
	[9]n^n
------------------------------------------------------------------------------------------------------	  
(3)分析算法的时间复杂度（大O阶）的方法
	1.用1取代运行时间中的所有加法常数
	2.在修改后的运行次数函数中，只保留最高阶项
	3.如果最高阶项存在且不是1，则去除与这个项相乘的常数。
	4.得到的最后结果就是大O阶
------------------------------------------------------------------------------------------------------	  
(4)空间复杂度
	// 写代码时，完全可以用空间来换时间。
	1.通常用“时间复杂度”来指运行时间的需求
	2.通常用空间复杂度指空间需求。
######################################################################################################
				二、 线性表
######################################################################################################
定义：由零个或多个数据元素组成的有限序列。
数据类型分类：
	原子类型：不可以再分解的类型（如：整形，浮点型）。
	结构类型：由若干个类型组合而成的类型（如：结构体）。
抽象数据类型：
		指一个数学模型及定义在该模型上的一组操作
------------------------------------------------------------------------------------------------------	  
(1)线性表的顺序存储结构：[a1,a2,a3...] 
	[1]插入算法的思路
		1.如果插入位置不合理，抛出异常
		2.如果线性表长度大于等于数组长度，则抛出异常或动态增加数组容量
		3.重左后一个元素开始向前遍历到低i个位置，分别将它们都后移一个位置；
		4.将要插入的元素填入位置i处；
		5.线性表长度+1
	[2]删除操作
		1.如果删除位置不合理，抛出异常；
		2.取出删除元素
		3.从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置。
		4.表长-1
	[3]线性表插入和删除操作的时间复杂度
		1.最好的情况：O(1)
			插入和删除的位置是第一个元素，不需要移动其他元素的位置。
		2.最坏的情况：O(n)
			插入和删除的位置是最后一个元素，
		
------------------------------------------------------------------------------------------------------	  
			
（2）线性表的链式存储结构：
		


------------------------------------------------------------------------------------------------------	  


------------------------------------------------------------------------------------------------------	  
