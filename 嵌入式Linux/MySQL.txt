
【一】Windows平台
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【二】Linux平台

▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
					第1章	mysql初始化和清理
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	

MYSQL *mysql_init(MYSQL *mysql)		// 初始化一个连接句柄
mysql_close(MYSQL *mysql)			// 关闭MySQL服务器的连接

int mysql_library_init(int argc, char **argv, char **groups)	// 初始化MySQL库
void mysql_library_end(void)		// 终止使用MySQL库


▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
					第2章	数据库的连接和登录
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
// 连接到数据库
MYSQL *STDCALL mysql_real_connect(MYSQL *mysql, const char *host,
			  const char *user, const char *passwd,
			  const char *db, unsigned int port,
			  const char *unix_socket,		// 系统创建套接字时传入0.
			  unsigned long clientflag);

// 设置连接属性(断开重连、连接/读取超时、是否获取表信息等)
int mysql_options(MYSQL *mysql,
			enum mysql_option option,
			const void *arg);
	// 宏enum mysql_option部分值		
	.MYSQL_OPT_CONNECT_TIMEOUT	// 超时时间设置	
	.MYSQL_OPT_RECONNECT		// 是否自动重连
	.MYSQL_OPT_READ_TIMEOUT		// 读超时时间设置
	.MYSQL_OPT_WRITE_TIMEOUT	// 写超时时间设置
	.MYSQL_OPT_OPTIONAL_RESULTSET_METADATA	// 设置结果集中是否包含元数据信息,默认打开
	
	

// 检测到服务器的连接,如果自动重连启动,将会尝试重连，连接成功或者重连成功返回0；
   如果自动重连关闭，且连接到服务器断开，则返回错误。
int mysql_ping(MYSQL *mysql)

// 例如: 设置自动重连和超时
    int connectTimeout = 5; //秒
    bool Reconnect = true;
    mysql_options(&sql, MYSQL_OPT_CONNECT_TIMEOUT, &connectTimeout);	// 使能超时为5s
    mysql_options(&sql, MYSQL_OPT_RECONNECT, &Reconnect);	//使能自动重连

▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
					第3章	数据库查询
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
【一】执行SQL语句
	int mysql_real_query(MYSQL *mysql, const char *cmd, unsigned long lenth);成功返回0
	int mysql_query(MYSQL *mysql, const char *cmd)	// 命令中不能含"\0"。成功返回0

注意:
	1.命令不需要以";"结尾
	2.执行完	"SQL查询语句"后，必须"获取结果集"和"清理结果集"才，可再次执行“查询语句”。

▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【二】获取结果集
	// 一般用这个
	MYSQL_RES *mysql_use_result(MYSQL *mysql);	 // 即将读取，且未真正读取结果集，立即返回。	
	MYSQL_RES *mysql_store_result(MYSQL *mysql); // 读取结果集中所有数据才会返回。可在mysql_options中设置包大小
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【三】表结构获取
	// 每次读取,返回结果集中的下一个表字段,读到结尾返回NULL;
	MYSQL_FIELD *mysql_fetch_field(MYSQL_RES *result);

	// 返回结果集中的列数(字段数)
	unsigned int mysql_num_fields(MYSQL_RES *result)		


▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【四】遍历和清理结果集

	// 每次读取,返回结果集中的下一行数据,读到结尾返回NULL;
	MYSQL_ROW mysql_fetch_row(MYSQL_RES *result);
		
	// 读取当前行中各字段信息(字符串)的长度信息(保存在整形数组中)
	unsigned long *mysql_fetch_lengths(MYSQL_RES *result);	
	
	// 释放结果集的空间
	void mysql_free_result(MYSQL_RES *result);				





