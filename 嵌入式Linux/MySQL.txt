
项目说明:
路径: Practice\mysqlCode	
01_test_mysql		测试mysql
02_tableOperate		测试表创建、插入、修改、删除
03_mutiStatement	执行多条sql语句



▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
					第1章	mysql初始化和清理
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	

MYSQL *mysql_init(MYSQL *mysql)		// 初始化一个连接句柄
mysql_close(MYSQL *mysql)			// 关闭MySQL服务器的连接

int mysql_library_init(int argc, char **argv, char **groups)	// 初始化MySQL库
void mysql_library_end(void)		// 终止使用MySQL库


▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
					第2章	数据库的连接和登录
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
// 连接到数据库
MYSQL *STDCALL mysql_real_connect(MYSQL *mysql, const char *host,
			  const char *user, const char *passwd,
			  const char *db, unsigned int port,
			  const char *unix_socket,		// 系统创建套接字时传入0.
			  unsigned long clientflag);

// 设置连接属性(断开重连、连接/读取超时、是否获取表信息等)
int mysql_options(MYSQL *mysql,
			enum mysql_option option,
			const void *arg);
	// 宏enum mysql_option部分值		
	.MYSQL_OPT_CONNECT_TIMEOUT	// 超时时间设置	
	.MYSQL_OPT_RECONNECT		// 是否自动重连
	.MYSQL_OPT_READ_TIMEOUT		// 读超时时间设置
	.MYSQL_OPT_WRITE_TIMEOUT	// 写超时时间设置
	.MYSQL_OPT_OPTIONAL_RESULTSET_METADATA	// 设置结果集中是否包含元数据信息,默认打开
	
	

// 检测到服务器的连接,如果自动重连启动,将会尝试重连，连接成功或者重连成功返回0；
   如果自动重连关闭，且连接到服务器断开，则返回错误。
int mysql_ping(MYSQL *mysql)

// 例如: 设置自动重连和超时
    int connectTimeout = 5; //秒
    bool Reconnect = true;
    mysql_options(&sql, MYSQL_OPT_CONNECT_TIMEOUT, &connectTimeout);	// 使能超时为5s
    mysql_options(&sql, MYSQL_OPT_RECONNECT, &Reconnect);	//使能自动重连

▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
					第3章	数据库查询
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
【一】执行SQL语句
	int mysql_real_query(MYSQL *mysql, const char *cmd, unsigned long lenth);成功返回0
	int mysql_query(MYSQL *mysql, const char *cmd)	// 命令中不能含"\0"。成功返回0

注意:
	1.命令不需要以";"结尾
	2.执行完	"SQL查询语句"后，必须"获取结果集"和"清理结果集"才，可再次执行“查询语句”。

▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【二】获取结果集

	MYSQL_RES *mysql_use_result(MYSQL *mysql);	 // 即将读取，且未真正读取结果集，立即返回。	
	MYSQL_RES *mysql_store_result(MYSQL *mysql); // 读取结果集中所有数据才会返回。可在mysql_options中设置包大小

注意: 仅当上一条sql语句是查询语句时，才会有结果集返回，上述两个函数才不会返回空指针。

▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【三】表结构获取
	// 每次读取,返回结果集中的下一个表字段,读到结尾返回NULL;
	MYSQL_FIELD *mysql_fetch_field(MYSQL_RES *result);

	// 返回结果集中表的列数(字段数)
	unsigned int mysql_num_fields(MYSQL_RES *result)		

	// 获取上一条SQL语句集中表的列数(字段数)
	unsigned int mysql_field_count(MYSQL *mysql)

注意:	
	1.执行insert、update和delete这样的语句的时候，是不会有结果集返回，因此mysql_store_result()会返回一个NULL。
	2.第二，执行select或show这样的语句时，一定会有内容返回，可以取得列信息，但是记录可以为0，也可以不为0。
		这就像一个表，表头一定存在，但是表中可以没有数据。

▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【四】遍历和清理结果集

	// 每次读取,返回结果集中的下一行数据,读到结尾返回NULL;
	MYSQL_ROW mysql_fetch_row(MYSQL_RES *result);
		
	// 读取当前行中各字段信息(字符串)的长度信息(保存在整形数组中)
	unsigned long *mysql_fetch_lengths(MYSQL_RES *result);	
	
	// 释放结果集的空间
	void mysql_free_result(MYSQL_RES *result);				

		

▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
					第3章	创建、插入、修改、删除表
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	

	// 执行以空结尾的字符串stmt_str指向的SQL语句, 成功返回0。
	   该函数可用于执行mysql语句来创建mysqsl数据库.
	int mysql_query(MYSQL *mysql, const char *q);	//  通常，字符串q必须由单个SQL语句组成，而不带终止分号(；)或g。
	int mysql_real_query(MYSQL *mysql, const char *stmt_str, unsigned long length)

	// 上一个SQL语句执行影响的行数.
	uint64_t mysql_affected_rows(MYSQL *mysql);

	// 返回上一个INSERT或UPDATE语句为自动增量列生成的值。
	uint64_t mysql_insert_id(MYSQL *mysql)

	注意: 
		1.使用delete语句删除表中的内容时,只是对表做了标记,并不会真正删除存储的内容。
		   想要从磁盘上删除其数据应该在其后执行优化语句：OPTIMIZE TABLE 表名。
		2.使用delete语句删除表中的内容时，对于表中的自增变量未重置。插入新数据时自增变量会紧接着删除前的开始。
		3.使用“truncate 表名”语句，会直接从磁盘上清空表数据，并重置自增变量位1.

▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
					第4章	C API多语句执行支持
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
// https://dev.mysql.com/doc/refman/8.0/en/c-api-multiple-queries.html
【一】简述
	1.默认情况下，MySQL_query()和mysql_real_query()将其语句字符串参数解释为要执行的单个语句，
		并根据语句是否生成结果集（一组行，如选择）或受影响行计数（如插入、更新等）来处理结果。
	2.My SQ L还支持用分号（；）字符分隔的包含多个语句的字符串的执行。
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【二】启用多语句执行支持和多结果处理支持
	1.调用mysql_real_connect函数时,为clientflag成员设置CLIENT_MULTI_STATEMENTS标记(多语句执行支持)
		说明: CLIENT_MULTI_STATEMENTS标记隐式启用了CLIENT_MULTI_RESULTS标记(多结果处理支持).
	2.或者:连接后调用mysql_set_server_option函数传入MYSQL_OPTION_MULTI_STATEMENTS_ON来启用支持.
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【三】处理多个结果集或多个行操作记录
	1.执行多语句字符串可以生成多个结果集或行操作记录
	2.结果集中的顺序与SQL语句执行的顺序相同.
	MySQL_more_results()
	mysql_next_result()

▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【四】推荐策略
	1.将CLIENT_MULTI_STATEMENTS传递给mysql_real_connect（），以完全启用多语句执行和多结果处理。
	2.调用mysql_query（）或mysql_real_query（）并确认成功后，进入一个循环，在其中处理语句结果。
	3.对于循环的每次迭代，处理当前语句的结果集或受影响的行数。 如果发生错误，退出循环。
	4.在循环结束时，调用mysql_next_result（）来检查是否存在另一个结果，如果存在则启动检索。 
		如果没有更多结果可用，就退出循环。

注意: mysql_query（)执行多条sql语句时,函数立即返回,并不代表多条语句执行完成,需要获取执行结果集才能保证SQL语句执行.

说明:
	1.执行insert、update和delete这样的语句的时候，是不会有任何内容返回，因此mysql_store_result()会
		返回一个NULL。


▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
					第5章	事务（transaction）
▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃	
【一】事务简述
	概念: 
		1.在关系数据库中，一个事务可以是一条SQL语句，一组SQL语句或整个程序。
		2.事务是恢复和并发控制的基本单位。
	特性
		// 事务具有四级基本属性（俗称ACID特性）
		1.原子性(atomicity):：	 事务中的操作要么都做，要么都不做。
		2.一致性（consistency）：事务处理的中间状态对外不可见，外界仅能看到事务执行前的初始状态和执行后的最终状态。
		3.隔离性（isolation）：  事务的执行过程中不能被其他事务干扰。
		4.持久性（durability）： 事务执行后对数据库的改变不受因其后的故障或其他操作影响。
	

▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【二】mysql语句执行事务的策略示例
	1.流程
			开启事务
				↓
			禁用自动提交(InnoDB引擎默认每条语句都是一个事务)
				↓
			执行SQL事务
				↓
			提交事务
				↓
		  事务全部内容执行成功 ?
		   ↓是		 ↓否
		启用自动提交	 回滚事务。

	2.对应的sql语句
		---------------------------------------------------------------
		开启事务： 		 BEGIN 或 START TRANSACTION 显式地开启一个事务；
		---------------------------------------------------------------
		禁/启用自动提交： set autocommit=0/1”
		---------------------------------------------------------------
		事务:			 连续的多条sql语句
		---------------------------------------------------------------
		提交：			 COMMIT 会提交事务
		---------------------------------------------------------------
		回滚：			 “rollback”（回到事务执行前的状态）
		---------------------------------------------------------------
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
【三】MySQL两大存储引擎MyISAM和InnoDB
	(1)MyISAM
		1.不支持事务中的回滚
		2.不支持	外键
		3.仅支持表级锁
		4.MyISAM支持全文索引
	(2)InnoDB
		1.支持事务	
		2.InnoDB每一条SQL语言都默认封装成事务，自动提交。
		3.支持外键
		4.InnoDB支持表、行(默认)级锁
		5.Innodb不支持全文索引	
	选用：
		MySQL5.5版本开始Innodb已经成为Mysql的默认引擎(之前是MyISAM)。




 

注意:
	事务仅能对
	
START TRANSACTION;

set autocommit=0;
create table test(id int);

begin;
insert into test values(1);
insert into test values(2);

insert into test values(3);
insert into test values(4);

drop table test;
commit;
rollback;










